#!/usr/bin/python3 -u

import argparse
import json
from subprocess import Popen, PIPE
import sys

# @brief Function to create a new feature package
#        generated package will contain 38 bytes
# @param package_name, name of the file to output package data to
# @param car_id, the id of the car the feature is being packaged for
# @param feature_number, the feature number being packaged
def package(package_name, car_id, feature_number):

    # read the package encryption key from host secrets
    try:
        with open('/secrets/' + f"{car_id}.json", 'r') as fp:
            package_enc_key = json.load(fp)['package_enc_key']
    except:
        sys.exit("The secret file for the car does not exist!")
    

    while True:
        # use ascon to encrypt the feature package

        # generate command 
        command = ["./package_feature_helper", str(car_id), str(feature_number)]
        for i in package_enc_key:
            command.append(str(ord(i)))

        # execute command and read the result
        process = Popen(command, stdout=PIPE)
        result = process.stdout.readline()

        # Write data out to package file
        # /package_dir/ is the mounted location inside the container - should not change
        with open(f"/package_dir/{package_name}", "wb") as fhandle:
            fhandle.write(result)

        # read the package built
        with open(f"/package_dir/{package_name}", "rb") as fhandle:
            message = fhandle.read()
            # break the loop if the size of the package is 38 bytes
            if(len(message) == 38):
                break

    print("Feature packaged")


# @brief Main function
#
# Main function handles parsing arguments and passing them to program
# function.
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--package-name", help="Name of the package file", type=str, required=True,
    )
    parser.add_argument(
        "--car-id", help="Car ID", type=int, required=True,
    )
    parser.add_argument(
        "--feature-number",
        help="Number of the feature to be packaged",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    package(args.package_name, args.car_id, args.feature_number)


if __name__ == "__main__":
    main()
